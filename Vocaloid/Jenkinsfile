pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.46.0-jammy' }
    }

    environment {
        GITHUB_URL = 'https://github.com/DuyThanhLieu/Automation-testing.git'
        REPO_NAME = 'Vocaloid'
        FILE_SH = 'Vocaloid_Auto.sh'
        FILE_BAT = 'Vocaloid_Auto.bat'
        COMMAND = 'npx playwright test BS_Actions.spec.js --reporter=line --workers=1'
        SERVER_PATH = "Automation-testing/${REPO_NAME}"
        BRANCH_NAME = 'main'
    }

    triggers {
        cron('0 1 * * *') // Chạy lúc 1:00 AM hàng ngày
    }

    stages {
        stage('CI: Checkout Code') {
            steps {
                script {
                    echo "Cloning repository from ${GITHUB_URL}"
                    sh "git clone -b ${env.BRANCH_NAME} ${env.GITHUB_URL} ${env.SERVER_PATH}"

                    echo "Setting up repository path..."
                    env.REPO_PATH = "${env.SERVER_PATH}"

                    echo "Current working directory:"
                    sh 'pwd'

                    echo "Listing contents of ${env.REPO_PATH}:"
                    sh "ls -la ${env.REPO_PATH}"

                    echo "Checking if Data directory exists..."
                    sh """
                        if [ -d "${env.REPO_PATH}/Data" ]; then
                            echo "Data directory found."
                        else
                            echo "Data directory not found."
                        fi
                    """
                }
            }
        }

        stage('Setup Dependencies') {
            steps {
                echo 'Setting up dependencies'
                script {
                    sh """
                        cd ${env.REPO_PATH}
                        
                        if [ -d "node_modules" ]; then
                            echo "node_modules already exists. Checking Playwright version..."
                            chmod +x node_modules/.bin/playwright

                            if npx playwright --version; then
                                echo "Playwright is already installed. Skipping installation."
                            else
                                echo "Playwright is not installed. Installing..."
                                rm -rf node_modules package-lock.json
                                npm install
                                npx playwright install
                                npm install @playwright/test@latest
                            fi
                        else
                            echo "node_modules does not exist. Installing dependencies..."
                            npm install
                            npx playwright install
                            npm install @playwright/test@latest
                        fi
                    """
                }
            }
        }

        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    try {
                        sh """
                            cd ${env.REPO_PATH}
                            ${env.COMMAND}
                        """
                    } catch (Exception e) {
                        echo "Test execution failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up temporary files..."
                if (isUnix()) {
                    sh """
                        if [ -d "${SERVER_PATH}/temp" ]; then
                            rm -rf ${SERVER_PATH}/temp/*
                        else
                            echo "Temporary folder does not exist."
                        fi
                    """
                } else {
                    bat """
                        if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*
                    """
                }
            }
        }

        success {
            script {
                echo "✅ All test cases passed successfully!"
            }
        }

        failure {
            script {
                echo "❌ Some test cases failed. Check the logs."
            }
        }
    }
}
